#!/usr/bin/env node

/**
 * Module dependencies.
 */
var config = require('../config/index'),
    logger = config.logger;
var app = require('../app');
var debug = require('debug')('alexdeeznuts:server');
var http = require('http');
var https = require('https');
var rtmp = require('../modules/rtmp');
var cron = require('../modules/cron').start();
var async = require('async');
var Video = require('../models/video');
var path = require('path');
var fs = require('fs');
var fss = require('fs-extra');

/**
 * Get port from environment and store in Express.
 */
var server;
var port = normalizePort(config.port);
app.set('port', port);

// Startup
async.series([
  function (step) {
    var User = require('../models/user');
    User.findOne({'username':config.alexd.username}, function (err, alexd) {
      if (err) return logger.warn(err);
      if (!alexd) {
        logger.log('Prepping bot: %s', config.alexd.username);
        alexd = new User(config.alexd);
        alexd.save(function (err) {
          if (err) logger.warn(err);
          step(null);
        });
      }
      else {
        logger.log('Bot found: %s', alexd.username);
        step(null);
      }
    });
  },
  // database initialization
  function (step) {
    Video.find({'isOriginal':true}, function (err, videos) {
      if (err) logger.warn(err);
      logger.log('Videos available: %s', videos.length);
      if (!videos||videos.length==0) {
        var example = new Video(config.defaultVideo);
        example.save(function (err) {
          step(err);
        });
      }
      else step(null);
    });
  },
  // move any mp4s from public/videos/live/stream -> public/videos/archived
  function (step) {
    var fs = require('fs');
    logger.log('Archiving MP4s');
    fss.ensureSymlinkSync(config.videosPath, path.join(__dirname, '../public/videos'));
    fss.ensureSymlinkSync(path.join(config.videosPath, 'archived'), path.join(__dirname, '../public/videos/archived'));
    fss.ensureSymlinkSync(path.join(config.videosPath, 'live'), path.join(__dirname, '../public/videos/live'));
    fss.ensureSymlinkSync(config.imagesPath, path.join(__dirname, '../public/images'));
    fss.ensureSymlinkSync(path.join(config.imagesPath, 'thumbnails'), path.join(__dirname, '../public/images/thumbnails'));
    
    // fss.ensureDirSync(fs.realpathSync(path.join(__dirname, '../public/videos/archived')));
    // fss.ensureDirSync(fs.realpathSync(path.join(__dirname, '../public/images/thumbnails')));
    // stream directories
    fs.readdir(path.join(__dirname, '../public/videos/live'), function (err, streams) {
      if (err) {
        logger.warn(err);
        return step(null);
      }
      logger.debug('streams: %s', streams);
      var series = [];
      fss.ensureSymlinkSync(path.join(config.videosPath, 'live'), path.join(__dirname, '../public/videos/live'));
      fss.ensureSymlinkSync(path.join(config.videosPath, 'archived'), path.join(__dirname, '../public/videos/archived'));
          
      for (var i=0;i<streams.length;i++)
        series.push(function (next) {
          // mp4s in directories
          var stream_name = streams.shift();
          var stream_path = path.join(__dirname, '../public/videos/live', stream_name);
          var archived_path = path.join(__dirname, '../public/videos/archived', stream_name);

          // logger.debug('stream_name: %s', stream_name);
          logger.log('stream: %s', stream_name);
          logger.debug('stream_path: %s', stream_path);
          logger.debug('archived_path: %s', archived_path);
          // fss.ensureDirSync(archived_path);
          fss.ensureSymlinkSync(path.join(config.videosPath, 'archived/', stream_name), archived_path);
          fs.readdir(stream_path, function (err, mp4s) {
            if (err) {
              logger.warn(err);
              return next(null);
            }
            logger.debug('MP4s:');
            logger.debug(mp4s);
            if (mp4s.length==0) {
              logger.debug('skipping empty');
              return next(null);
            }
            var done = 0;
            for (var i=0; i<mp4s.length; i++) {
              logger.log('Archiving: %s', mp4s[i]);
              var file_path = path.join(__dirname, '../public/videos/live', stream_name, mp4s[i]);
              var file_path_archived = path.join(__dirname, '../public/videos/archived', stream_name, mp4s[i].toLowerCase());
              logger.debug('file_path: %s', file_path);
              logger.debug('file_path_archived: %s', file_path_archived);
              fss.moveSync(file_path, file_path_archived);
              var newVideo = new Video({'title':mp4s[i],'path':file_path_archived,'isOriginal':true});
              newVideo.save(function (err) {
                if (err) logger.warn(err);
                done++;
                if (done==mp4s.length)
                  next(null);
              });
            }
          });
        });
      series.push(function (next) {
        logger.log('Archiving Complete');
        step(null);
      });
      async.series(series);
    });
  },
  // double checks all originals have a preview
  function (step) {
    var previews_path = path.join(__dirname, '../public/videos/previews');
    logger.debug('previews_path: %s', previews_path);
    fss.ensureDirSync(previews_path);
    if (!config.createPreviews) {
      logger.log('Skipping Previews');
      return step(null);
    }
    Video.createPreviews(function (err) {
      if (err) logger.warn(err);
      step(null);
    });    
  },
  function (step) {
    if (config.ssl) {
      /**
       * Create HTTPS server.
       */
      var privateKey  = fs.readFileSync(config.ssl_key, 'utf8');
      var certificate = fs.readFileSync(config.ssl_cert, 'utf8');
      var credentials = {'key': privateKey, 'cert': certificate};
      server = https.createServer(credentials, app);
    }
    else {
      server = http.createServer(app);
    }

    /**
     * Listen on provided port, on all network interfaces.
     */
    // server.listen(port, "127.0.0.1", function () {
    server.listen(port, "0.0.0.0", function () {
      logger.log("Live at Port %s", port);
    });
    server.on('error', onError);
    server.on('listening', onListening);
  }
]);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}