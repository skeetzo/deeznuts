#!/usr/bin/env node

/**
 * Module dependencies.
 */
var config = require('../config/index'),
    logger = config.logger;
var app = require('../app');
var debug = require('debug')('alexdeeznuts:server');
var http = require('http');
var https = require('https');
var rtmp = require('../modules/rtmp');
var cron = require('../modules/cron').start();
var async = require('async');
var Video = require('../models/video');
/**
 * Get port from environment and store in Express.
 */
var server;
var port = normalizePort(config.port);
app.set('port', 3020);

// Startup
async.series([
  function (step) {
    var User = require('../models/user');
    User.findOne({'username':config.alexd.username}, function (err, alexd) {
      if (err) return logger.warn(err);
      if (!alexd) {
        logger.log('Prepping bot: %s', config.alexd.username);
        alexd = new User(config.alexd);
        alexd.save(function (err) {
          if (err) logger.warn(err);
          step(null);
        });
      }
      else {
        logger.log('Bot found: %s', alexd.username);
        step(null);
      }
    });
  },
  // database initialization
  function (step) {
    Video.find({'isOriginal':true,'isPreview':false}, function (err, videos) {
      if (err) logger.warn(err);
      logger.log('Videos available: %s', videos.length);
      if (!videos||videos.length==0) {
        var example = new Video(config.defaultVideo);
        example.save(function (err) {
          step(err);
        });
      }
      else step(null);
    });
  },
  // double checks all originals have a preview
  function (step) {
    if (!config.createPreviews) {
      logger.log('Skipping Previews');
      return step(null);
    }
    Video.find({'isOriginal':true,'isPreview':false,'hasPreview':false}, function (err, videos) {
      if (err) logger.warn(err);
      if (videos&&videos.length>0) {
        logger.log('Generating Preview: %s', videos.length);
        return Video.createPreviews(function (err) {
          step(err);
        });    
      }
      step(null);
    });
  },
  function (step) {
    if (config.ssl) {
      /**
       * Create HTTPS server.
       */
      var fs = require('fs');
      var privateKey  = fs.readFileSync(config.ssl_key, 'utf8');
      var certificate = fs.readFileSync(config.ssl_cert, 'utf8');
      var credentials = {'key': privateKey, 'cert': certificate};
      server = https.createServer(credentials, app);
    }
    else {
      server = http.createServer(app);
    }

    /**
     * Listen on provided port, on all network interfaces.
     */
    server.listen(port, "127.0.0.1", function () {
      logger.log("Live at Port %s", port);
    });
    server.on('error', onError);
    server.on('listening', onListening);
  }
]);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}