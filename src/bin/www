#!/usr/bin/env node

/**
 * Module dependencies.
 */
var config = require('../config/index'),
    logger = config.logger;
var app = require('../app');
var debug = require('debug')('alexdeeznuts:server');
var http = require('http');
var https = require('https');
var rtmp = require('../modules/rtmp');
var cron = require('../modules/cron').start();

var alexd = require('../models/user');
alexd.findOne({'username':config.alexd.username}, function (err, alexd_) {
  if (err) return config.logger.warn(err);
  if (!alexd_) {
    config.logger.log('Prepping bot: %s', config.alexd.username);
    alexd = new alexd(config.alexd);
    alexd.save(function (err) {
      if (err) config.logger.warn(err);
    });
  }
  else
    config.logger.log('Bot found: %s', alexd_.username);
});

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(config.port);
app.set('port', port);

var server;
if (config.ssl) {
  /**
   * Create HTTPS server.
   */
  var fs = require('fs');
  var privateKey  = fs.readFileSync(config.ssl_key, 'utf8');
  var certificate = fs.readFileSync(config.ssl_cert, 'utf8');
  var credentials = {'key': privateKey, 'cert': certificate};
  server = https.createServer(credentials, app);
}
else {
  server = http.createServer(app);
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, "127.0.0.1", function () {
  logger.log("Live at Port %s", port);
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}