#!/usr/bin/env node

/**
 * Module dependencies.
 */
var config = require('../config/index'),
    logger = config.logger;
var Log = require('../modules/log').prepare();
var app = require('../app');
var debug = require('debug')('deeznuts:server');
var http = require('http');
var https = require('https');
var rtmp = require('../modules/rtmp');
var cron = require('../modules/crons').start();
var async = require('async');
var Video = require('../models/video');
var path = require('path');
var fs = require('fs');
var fss = require('fs-extra');
var _ = require('underscore');
var moment = require('moment');

/**
 * Get port from environment and store in Express.
 */
var server;
var port = normalizePort(config.port);
app.set('port', port);

// Startup
async.series([
  function (step) {
    logger.log("--- Launching %s --- ", config.domain);
    step(null);
  },
  function (step) {
    var App = require('../models/app');
    App.findOne({}, function (err, app) {
      if (err) logger.warn(err);
      if (!app) {
          logger.log('Creating New App');
          app = new App();
      }
      else {
          app.bootCount++;
          logger.log('App Loaded: %s', app.bootCount);
      }
      app.save(function (err) {
        if (err) logger.warn(err);
        step(null);
      });
    });
  },
  function (step) {
    if (!config.debugging) {
      logger.log('Skipping: Debugging');
      return step(null);
    }
    require('../modules/debug').debug(function (err) {
      if (err) logger.warn(err);
      step(null);
    });
  },
  function (step) {
    var User = require('../models/user');
    User.findOne({'username':config.deeznutsUser.username}, function (err, user) {
      if (err) return logger.warn(err);
      if (!user) {
        logger.log('Prepping Bot: %s', config.deeznutsUser.username);
        user = new User(config.deeznutsUser);
        user.save(function (err) {
          if (err) logger.warn(err);
          step(null);
        });
      }
      else {
        logger.log('Bot found: %s', user.username);
        step(null);
      }
    });
  },
  function (step) {
    var User = require('../models/user');
    User.findOne({'username':config.thotsUser.username}, function (err, user) {
      if (err) return logger.warn(err);
      if (!user) {
        logger.log('Prepping Thot: %s', config.thotsUser.username);
        user = new User(config.thotsUser);
        user.save(function (err) {
          if (err) logger.warn(err);
          step(null);
        });
      }
      else {
        logger.log('Resetting Thot: %s', user.username);
        user.time = config.thotsUser.time;
        user.save(function (err) {
          if (err) logger.warn(err);
          step(null);
        });
      }
    });
  },
  // Twitter
  function (step) {
    if (!config.Twitter) {
      logger.log('Disabled: Twitter');
      return step(null);
    }
    var Twitter = require('../modules/twitter');
    Twitter.connect(function (err) {
      if (err) logger.warn(err);
      step(null);
    });
  },
  // database initialization
  function (step) {
    Video.findOne({'title':config.defaultVideo.title}, function (err, exampleVideo) {
      if (err) logger.warn(err);
      if (!exampleVideo) {
        // logger.debug('Creating Example video...');
        var example = new Video(config.defaultVideo);
        example.save(function (err) {
          if (err) logger.warn(err);
          step(null);
        });
      }
      else step(null);
    });
  },
  function (step) {
    if (config.ssl) {
      /**
       * Create HTTPS server.
       */
      var privateKey  = fs.readFileSync(config.ssl_key, 'utf8');
      var certificate = fs.readFileSync(config.ssl_cert, 'utf8');
      var credentials = {'key': privateKey, 'cert': certificate};
      server = https.createServer(credentials, app);
    }
    else {
      server = http.createServer(app);
    }

    // socket.io
    const io = require('socket.io')(server);    
    require('../modules/socket.io').setup(io);

    /**
     * Listen on provided port, on all network interfaces.
     */
    // server.listen(port, "127.0.0.1", function () {
    server.listen(port, "0.0.0.0", function () {
      logger.log("Live at Port %s", port);
      step(null);
    });
    server.on('error', onError);
    server.on('listening', onListening);
  },
  // Archive
  function (step) {
    fss.ensureDirSync(config.videosPath);
    fss.ensureDirSync(config.imagesPath);
    fss.ensureDirSync(path.join(config.videosPath, 'live'));
    fss.ensureDirSync(path.join(config.videosPath, 'archived'));
    fss.ensureDirSync(path.join(config.videosPath, 'previews'));
    fss.ensureDirSync(path.join(config.imagesPath, 'thumbnails'));
    step(null);
  },
  // Rebuild
  function (step) {
    if (!config.populateFromFiles) {
      logger.log('Skipping: Rebuild From Files');
      return step(null);
    }
    // rebuilds video db based on existing mp4s
    Video.populateFromFiles(function (err) {
      if (err) logger.warn(err);
      step(null);
    });
  },
  // Delete Missing
  function (step) {
    if (!config.deleteMissing) {
      logger.log('Skipping: Delete Missing');
      return step(null);
    }
    // deletes video models that are missing mp4s
    Video.deleteMissing(function (err) {
      if (err) logger.warn(err);
      step(null);
    });    
  },
  // Previews
  function (step) {
    if (!config.createPreviews) {
      logger.log('Skipping: Create Previews');
      return step(null);
    }
    Video.createPreviews(function (err) {
      if (err) logger.warn(err);
      step(null);
    });    
  },
  // Archive
  function (step) {
    if (!config.archive_videos) {
      logger.log('Skipping: Archive Videos');
      return step(null);
    }
    Video.archiveVideos(function (err) {
      if (err) logger.warn(err);
      step(null);
    });
  },
  function (step) {
    if (!config.upload_force_save) return step(null);
    Video.find({}, function (err, videos) {
      if (err) return step(null);
      for (var i=0;i<videos.length;i++) {
        videos[i].uploaded = true;
        videos[i].save();
      }
    });
    setTimeout(next => {
      step(null);
    },3000);
  },
  // upload all unuploaded videos
  function (step) {
    if (!config.upload_all_on_boot) return step(null);
    // Video.find({"uploaded":false}, function (err, videos) {
    Video.find({}, function (err, videos) {
      var series = [],
          uploads = [];
      logger.log("Uploading Forgotten: %s", videos.length);
      _.forEach(videos, function (video) {
        // fixes dates
        series.push(function (next) {
          video.save(function (err) {
            if (err) {
              logger.warn(err);
              return next(null);
            }
            var date_ = moment(new Date(video.date));
            var otherDate = moment(new Date(2019,11,1));
            logger.log("date: %s - %s:limit", date_.format('MM-DD-YYYY'), otherDate.format('MM-DD-YYYY'));
            if (date_<otherDate) return next(null);
            uploads.push(function (next) {
              logger.log("Forgotten video: %s", video.title);
              video.upload(function (err) {
                if (err) logger.warn(err);
                next(null);
              });
            });
          })
        });
      });
      series.push(function (next) {
        logger.log("balls")
        async.series(uploads)
      });
      uploads.push(function (next) {
        logger.log("no balls")
        step(null);
      })
      async.series(series);
    });
  },
  // PayPal
  function (step) {
    if (!config.PayPal||!config.PayPal_syncing_webhooks) {
      logger.debug('Skipping: PayPal Webhook Syncs');
      return step(null);
    }
    var PayPal = require('../modules/paypal');
    PayPal.syncWebhooks(function (err) {
      if (err) logger.warn(err);
      step(null);
    });
    if (config.debugging_paypal&&config.debugging_paypal_reset_plans) {
      logger.debug('Resetting: PayPal Plans');
      var Plan = require('../models/plan');
      Plan.find({}, function (err, plans) {
        if (err) return logger.warn(err);
        _.forEach(plans, function (plan) {
          plan.remove();
        });
      });
    }
  },
  function (step) {
    logger.log('--- Launched %s ---', config.domain)
  }
]);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}